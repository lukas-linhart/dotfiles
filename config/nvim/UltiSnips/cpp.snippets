# include <...>
snippet inc
#include <${1:iostream}>
endsnippet

# include "..."
snippet incl
#include "${1:header}.h"
endsnippet

snippet ndef "ifndef block"
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

# using directive
snippet usns
using namespace ${1:std};
endsnippet

# using declaration
snippet usn
using ${1:std}::${2:name};
endsnippet

# namespace
snippet ns
namespace ${1:ns_name} {
    ${0}
} /* namespace $1 */
endsnippet

# main()
snippet main
int main() {
    ${0}
    return 0;
}
endsnippet

# return
snippet ret
return ${0};
endsnippet

# for i
snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
    ${4}
}
endsnippet

# for custom
snippet for
for (${1:int }${2:i} = ${3:0}; $2 ${4:<} ${5:count}; $2${6:++}) {
    ${0:${VISUAL}}
}
endsnippet

# while
snippet wh
while (${1:/* condition */}) {
    ${0:${VISUAL}}
}
endsnippet

# do
snippet do
do {
    ${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet

# if
snippet if
if (${1:true}) {
    ${0:${VISUAL}}
}
endsnippet

# if else
snippet ife
if (${1:true}) {
    ${2:${VISUAL}}
} else {
    ${0}
}
endsnippet

# else
snippet el
else {
    ${0:${VISUAL}}
}
endsnippet

# else if
snippet elif
else if (${1:true}) {
    ${0:${VISUAL}}
}
endsnippet

# inline if
snippet ifi
if (${1:true}) ${0};
endsnippet

# t
snippet t
${1:/* condition */} ? ${2:a} : ${3:b};
endsnippet

# function declaration
snippet fund
${1:void} ${2:function_name}(${3});
endsnippet

# function definition
snippet fun
${1:void} ${2:function_name}(${3}) {
    ${4}
}
endsnippet

# function call
snippet fn
${1:function_name}(${2});
endsnippet

# cout
snippet cout
std::cout << ${1}${2: << std::endl};
endsnippet

# endl
snippet endl
std::endl
endsnippet

# cin
snippet cin
std::cin >> ${1};
endsnippet

# struct
snippet struct
struct ${1:struct_name} {
    ${2:data}
};
endsnippet

# templates
snippet temp
template <${1}>
endsnippet

snippet tempt
template <typename T>
endsnippet

snippet tn "typename" i
typename ${1:T}
endsnippet

# brackets
snippet . "brackets" i
[${1}]
endsnippet
